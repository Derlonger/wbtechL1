package main

//Дана последовательность чисел: 2,4,6,8,10. Найти сумму их
//квадратов(22+32+42….) с использованием конкурентных вычислений.

import (
	"fmt"
	"sync"
)

var numbers = [5]int{2, 4, 6, 8, 10}
var wg sync.WaitGroup // Нужен для ожидания завершения всех горутин
var sum int
var mu sync.Mutex // Необходим для безопасности к общим данным из разных горутин

func main() {
	fmt.Printf("Начальный список чисел: %v\n", numbers)

	// Создание канала для обработки чисел
	ch := make(chan int)

	// Увеличиваем счетчик горутин в ожидании
	wg.Add(2)

	// Запускаем новую горутину(main является основной горутиной)
	go squares(ch)

	// Запускаем горутину для вычисления суммы квадратов чисел
	go sumSquares(ch)

	// Ожидаем завершения горутина
	wg.Wait()

	fmt.Printf("Сумма квадратов чисел равенр: %v\n", sum)
}

// Функция для получения чисел из канала возведения их в квадрат и вывод в stdout
func squares(ch chan int) {
	// Уменьшаем счетчик горутин в WaitGroup после завршения
	defer wg.Done()

	for _, val := range numbers {
		ch <- val * val
	}

	// Закрываем канал после отправки числа
	close(ch)
}

// Функция для вычисления суммы квадратов чисел
func sumSquares(ch chan int) {
	// Уменьшаем счетчик горутин в WaitGroup после завршения
	defer wg.Done()

	for value := range ch {
		// Захватываем мьютекс перед обновлением общих данных
		mu.Lock()
		sum += value
		// Освобождаем мьютекс после завершения обновлени
		mu.Unlock()
	}
}
