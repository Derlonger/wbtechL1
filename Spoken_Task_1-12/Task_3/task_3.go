package main

/*
Mutex:
Mutex (или просто sync.Mutex в пакете sync) используется для обеспечения эксклюзивного доступа к разделяемому ресурсу.
Только одна горутина может захватить Mutex, и она блокирует другие горутины до тех пор, пока не освободит мьютекс.
Пример использования Mutex:

go
Copy code
package main

import (
	"fmt"
	"sync"
)

func main() {
	var mu sync.Mutex

	// Захватываем мьютекс
	mu.Lock()
	defer mu.Unlock()

	// Выполняем критическую секцию
	fmt.Println("Critical section")
}
RWMutex:
RWMutex (или sync.RWMutex) также предоставляет мьютекс, но с поддержкой "чтения" и "записи". Это означает,
что много горутин может параллельно читать данные, но только одна горутина может записывать данные,
и в этот момент все чтения блокируются. RWMutex более эффективен в случаях,
когда много горутин читает данные, но редко происходит запись.

Пример использования RWMutex:

package main

import (
	"fmt"
	"sync"
)

func main() {
	var mu sync.RWMutex

	// Захватываем мьютекс для чтения
	mu.RLock()
	defer mu.RUnlock()

	// Выполняем операции чтения (множество горутин может одновременно захватывать RLock)
	fmt.Println("Read operation")
}
Общий вывод: Если вам нужна поддержка одновременного чтения данных из нескольких горутин, используйте RWMutex.
В противном случае, если требуется только эксклюзивный доступ, Mutex может быть более простым в использовании.
*/
